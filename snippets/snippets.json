{
  "RN Generator Screen": {
    "prefix": "rngScreen",
    "body": [
      "import React, { Component } from 'react';",
      "import { View, Text } from 'react-native';",
      "",
      "export default class MyScreen extends Component {",
      "  constructor(props) {",
      "    super(props);",
      "    this.state = {",
      "      loading: true,",
      "    };",
      "  }",
      "",
      "  componentDidMount() {",
      "  }",
      "",
      "   render() {",
      "     return (",
      "       <View style={{ flex: 1 }}>",
      "         <Text>MyScreen</Text>",
      "       </View>",
      "     );",
      "   }",
      "}"
    ],
    "description": "Default Screen React Native"
  },
  "RN Generator Pure Screen": {
    "prefix": "rngpScreen",
    "body": [
      "import React, { PureComponent } from 'react';",
      "import { View, Text } from 'react-native';",
      "",
      "export default class MyScreen extends PureComponent {",
      "  constructor(props) {",
      "    super(props);",
      "    this.state = {",
      "      loading: true,",
      "    };",
      "  }",
      "",
      "  componentDidMount() {",
      "  }",
      "",
      "   render() {",
      "     return (",
      "       <View style={{ flex: 1 }}>",
      "         <Text>MyScreen</Text>",
      "       </View>",
      "     );",
      "   }",
      "}"
    ],
    "description": "Default Pure Screen React Native"
  },
  "RN Generator Modal": {
    "prefix": "rngModal",
    "body": [
      "import React, { Component } from 'react';",
      "import { View, Modal } from 'react-native';",
      "",
      "export default class MyModal extends Component {",
      "  constructor(props) {",
      "    super(props);",
      "    this.state = {",
      "      visible: false",
      "    };",
      "  }",
      "",
      "  onRequestClose() {",
      "    this.setState({",
      "      visible: false",
      "    });",
      "  }",
      "",
      "  onOpen() {",
      "    this.setState({",
      "      visible: true",
      "    });",
      "  }",
      "",
      "  onClose() {",
      "    this.setState({",
      "      visible: false",
      "    });",
      "  }",
      "",
      "  renderBody() {",
      "    return (",
      "      <View style={{ flex: 1 }}>",
      "",
      "      </View>",
      "    );",
      "  }",
      "",
      "  render() {",
      "    const { visible } = this.state;",
      "    return (",
      "      <Modal",
      "        animationType='fade'",
      "        transparent={true}",
      "        visible={visible}",
      "        onRequestClose={() => this.onRequestClose()}",
      "      >",
      "        {this.renderBody()}",
      "      </Modal>",
      "    );",
      "  }",
      "}"
    ],
    "description": "Default Modal React Native"
  },
  "RN Generator GET Method": {
    "prefix": "rngGET",
    "body": [
      "getData() {",
      "  const url = '';",
      "  fetch(url, {",
      "    method: 'GET',",
      "    headers: {",
      "      'Accept': 'text/html,application/xhtml+xml,application/xml,application/json;q=0.9,image/webp,*/*;q=0.8',",
      "      'Content-Type': 'application/json',",
      "    },",
      "  })",
      "    .then((response) => response.json())",
      "    .then((responseJson) => {",
      "       // Do something with responseJson",
      "       console.log(responseJson)",
      "    })",
      "    .catch((error) => {",
      "      console.log(error);",
      "    });",
      "}"
    ],
    "description": "Default Function Method GET"
  },
  "RN Generator POST Method": {
    "prefix": "rngPOST",
    "body": [
      "postData(data) {",
      "  const url = '';",
      "  const dataPost = JSON.stringify(data);",
      "  fetch(url, {",
      "    method: 'POST',",
      "    headers: {",
      "      'Accept': 'text/html,application/xhtml+xml,application/xml,application/json;q=0.9,image/webp,*/*;q=0.8',",
      "      'Content-Type': 'application/json',",
      "    },",
      "    body: dataPost",
      "  })",
      "    .then((response) => response.json())",
      "    .then((responseJson) => {",
      "      runInAction(() => {",
      "         // Do something with responseJson",
      "         console.log(responseJson)",
      "      });",
      "    })",
      "    .catch((error) => {",
      "      console.log(error);",
      "    });",
      "}"
    ],
    "description": "Default Function Method POST"
  },
  "RN Generator Flatlist": {
    "prefix": "rngFlatList",
    "body": [
      "<FlatList",
      "  ref={c => { this.flatList = c; }}",
      "  style={{ flex: 1 }}",
      "  keyboardShouldPersistTaps={'always'}",
      "  enableEmptySections",
      "  data={this.state.data}",
      "  keyExtractor={(item) => item.id.toString()}",
      "  renderItem={({ item, index }) => this.renderItem(item, index)}",
      "  // ListEmptyComponent={() => <EmptyComponent />}",
      "  // refreshControl={",
      "  //   <RefreshControl",
      "  //     refreshing={this.state.refreshing}",
      "  //     onRefresh={() => this.onRefresh()}",
      "  //   />",
      "  // }",
      "/>"
    ],
    "description": "Default FlatList React Native"
  },
  "RN Generator Style Center": {
    "prefix": "rngStyleCenter",
    "body": [
      "alignItems: 'center', justifyContent: 'center'"
    ],
    "description": "Default Style Center"
  },
  "RN Generator Default View": {
    "prefix": "rngView",
    "body": [
      "<View style={{}}>",
      "",
      "</View>"
    ],
    "description": "Default View"
  },
  "RN Generator Default TouchableOpacity": {
    "prefix": "rngTouchableOpacity",
    "body": [
      "<TouchableOpacity",
      "  onPress={() => { }}",
      "  style={{}}>",
      "",
      "</TouchableOpacity>"
    ],
    "description": "Default TouchableOpacity"
  },
  "RN Generator Default ReceiveProps": {
    "prefix": "rngReceiveProps",
    "body": [
      "componentWillReceiveProps(nextProps) {",
      "   this.setState({})",
      "}"
    ],
    "description": "Default ReceiveProps"
  },
  "RN Generator Default Border": {
    "prefix": "rngBorderStyle",
    "body": [
      "borderWidth: 1, borderColor: '#ccc', borderRadius: 5"
    ],
    "description": "Default Border Radius"
  },
  "RN Generator Axios Get": {
    "prefix": "rngag",
    "body": [
      "const url = ``;",
      "axios({",
      "  url,",
      "  method: 'get',",
      "  headers: {",
      "    'Content-Type': 'application/json'",
      "  }",
      "})",
      "  .then(response => {",
      "    if (response) {",
      "      //",
      "    }",
      "  })",
      "  .catch(err => {",
      "    console.log(err);",
      "  });"
    ],
    "description": "Method axios GET"
  },
  "RN Generator Axios Post": {
    "prefix": "rngap",
    "body": [
      "const url = ``;",
      "axios({",
      "  url,",
      "  method: 'post',",
      "  data: {",
      "    // content data post",
      "  },",
      "  config: {",
      "    headers: {",
      "      'Content-Type': 'application/json'",
      "    }",
      "  }",
      "})",
      "  .then((response) => {",
      "    if (response) {",
      "      //",
      "    }",
      "  })",
      "  .catch((err) => {",
      "    console.log(err);",
      "  });"
    ],
    "description": "Method axios POST"
  },
  "RN Generator View Keyboard": {
    "prefix": "rngvk",
    "body": [
      "<ViewKeyboard",
      "//    keyboardVerticalOffset={0} <= use for modal",
      "//    behavior={Platform.OS === 'android' ? 'position' : 'padding'} <= use for modal",
      ">",
      "    {this.renderBody()}",
      "</ViewKeyboard>"
    ],
    "description": "View auto height keyboard"
  },
  "RN Generator Form Field": {
    "prefix": "rngff",
    "body": [
      "<FormField",
      "  ref={c => { this.formField = c; }}",
      "  buttons={buttons}",
      "  model={this.data}",
      "  defaults={this.defaults}",
      "  initialValues={this.initData}",
      "  style={{}}>",
      "</FormField>"
    ],
    "description": "Idtek core mobile FormField"
  },
  "RN Generator TextField": {
    "prefix": "rngtf",
    "body": [
      "<TextField",
      "  name=''",
      "//  validate={CoreHelper.isValueNull}",
      "/>"
    ],
    "description": "Idtek core mobile TextField"
  },
  "RN Generator RadioFiled": {
    "prefix": "rngrf",
    "body": [
      "<RadioFiled",
      "  name=''",
      "//  validate={CoreHelper.chooseOne}",
      "  flexDirection='row' />"
    ],
    "description": "Idtek core mobile RadioField"
  },
  "RN Generator CheckboxField": {
    "prefix": "rngcf",
    "body": [
      "<CheckboxField",
      "  name=''",
      "//  validate={CoreHelper.chooseOneArrayObject}",
      "/>"
    ],
    "description": "Idtek core mobile CheckboxField"
  },
  "RN Generator DropdownField": {
    "prefix": "rngdf",
    "body": [
      "<DropdownField",
      "  name=''",
      "  validate={CoreHelper.chooseOne}",
      "/>"
    ],
    "description": "Idtek core mobile DropdownField"
  },
  "RN Generator DropdownMultiField": {
    "prefix": "rngdmf",
    "body": [
      "<DropdownMultiField",
      "  name=''",
      "//  validate={CoreHelper.chooseOneArrayObject}",
      "/>"
    ],
    "description": "Idtek core mobile DropdownMultiField"
  },
  "RN Generator DatePickerField": {
    "prefix": "rngdpf",
    "body": [
      "<DatePickerField",
      "  name=''",
      "//  validate={CoreHelper.isValueNull}",
      "/>"
    ],
    "description": "Idtek core mobile DatePickerField"
  },
  "RN Generator DateRangeField": {
    "prefix": "rngdrf",
    "body": [
      "<DateRangeField",
      "  name=''",
      "//  validate={CoreHelper.chooseStartEndDate}",
      "/>"
    ],
    "description": "Idtek core mobile DateRangeField"
  },
  "RN Generator DateTimeRangeField": {
    "prefix": "rngdtrf",
    "body": [
      "<DateTimeRangeField",
      "  name=''",
      "//  validate={dayMinMax} ",
      "/>"
    ],
    "description": "Idtek core mobile DateTimeRangeField"
  },
  "RN Generator InputAreaField": {
    "prefix": "rngiaf",
    "body": [
      "<InputAreaField",
      "  name=''",
      "//  validate={CoreHelper.isValueNull} ",
      "/>"
    ],
    "description": "Idtek core mobile InputAreaField"
  },
  "RN Generator MonthYearPickerField": {
    "prefix": "rngmypf",
    "body": [
      "<MonthYearPickerField",
      "  name=''",
      "//  validate={CoreHelper.isValueNull} ",
      "/>"
    ],
    "description": "Idtek core mobile MonthYearPickerField"
  },
  "RN Generator MonthYearPickerRangeField": {
    "prefix": "rngmyprf",
    "body": [
      "<MonthYearPickerRangeField",
      "  name=''",
      "//  validate={CoreHelper.chooseStartEndDate} ",
      "/>"
    ],
    "description": "Idtek core mobile MonthYearPickerRangeField"
  },
  "RN Generator ViewFieldArray": {
    "prefix": "rngvfa",
    "body": [
      "<ViewFieldArray",
      "  ref={c => { this.viewFieldArray = c; }}",
      "  name=''",
      "  buttonClearPosition='left'",
      "  render={(name, field) => {",
      "    return null;",
      "  }} />"
    ],
    "description": "Idtek core mobile ViewFieldArray"
  }
}